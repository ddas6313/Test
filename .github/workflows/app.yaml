name: Deploy app to EKS

on:
  push:
    branches:
    - main

env:
  EKS_CLUSTER: nirmatatestdd
  EKS_REGION: us-east-1
  
jobs:
  job1:
    name: Deploy to Cluster
    runs-on: ubuntu-latest 
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2
 
   ## AWS Credentials
    - uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.EKS_REGION }}

    
   # Install nctl
    - name: Set up nctl
      run: |-
       curl -LO https://nirmata-downloads.s3.us-east-2.amazonaws.com/nctl/nctl_3.2.3/nctl_3.2.3_linux_64-bit.zip
       unzip nctl_3.2.3_linux_64-bit.zip
       chmod 755 nctl
       mv nctl /usr/local/bin/
       #echo $PATH        
    # Get the EKS credentials so we can deploy to the cluster
    - run: |-
        aws eks list-clusters
        aws eks --region $EKS_REGION update-kubeconfig --name $EKS_CLUSTER
        nctl kubeconfig update --token ${{ secrets.NIRMATA_TOKEN }}
        kubectl config get-contexts
        kubectl config use-context nirmatatestdd1   
        
   # Deploy dockorized app image to the EKS cluster
    - name: Deploy Frontend 
      run: |-
        kubectl apply -f frontend.yaml
        kubectl wait --timeout=120s --for=condition=ready pod -l app=frontend
        kubectl rollout restart deploy frontend-deployment
        kubectl rollout status deployment frontend-deployment
        
   
   #deploy gateway and virtual services
    - name: Deploy gateway
      run: |-
        kubectl apply -f gateway.yaml
        kubectl get svc -l=istio=ingressgateway -n istio-system
        #kubectl apply -f dr-frontend.yaml
        kubectl apply -f devvs-frontend.yaml



  # job2:
  #   needs: job1
  #   name: Create subdomain in Cloudflare
  #   runs-on: ubuntu-latest    
    
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2
      
      
  #   # AWS Credentials
  #   - uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ env.EKS_REGION }}

  #   # Get the EKS credentials so we can deploy to the cluster
  #   - run: |-
  #       aws eks --region $EKS_REGION update-kubeconfig --name $EKS_CLUSTER
      
  #   - name: Update CloudFlare DNS with Cluster IP 
  #     run: |-
  #       # purge any existing records for our GCP subdomain.
  #       existing_records=( $(curl -X GET "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_DNS_ZONE }}/dns_records?type=CNAME&name=demo.managedorg.io" \
  #          -H "X-Auth-Email: ${{ secrets.CLOUDFLARE_EMAIL }}" \
  #          -H "X-Auth-Key: ${{ secrets.CLOUDFLARE_API_KEY }}" \
  #          -H "Content-Type: application/json"   | jq -r '.result[].id') )
  #       for record in ${existing_records[@]}; do
  #         curl -X DELETE "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_DNS_ZONE }}/dns_records/${record}" \
  #            -H "X-Auth-Email: ${{ secrets.CLOUDFLARE_EMAIL }}" \
  #           -H "X-Auth-Key: ${{ secrets.CLOUDFLARE_API_KEY }}" \
  #            -H "Content-Type: application/json"
  #       done
      
  #       # Create new record with latest cluster IP.
  #       CLUSTER_HOSTNAME=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
  #       curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_DNS_ZONE }}/dns_records" \
  #          -H "X-Auth-Email: ${{ secrets.CLOUDFLARE_EMAIL }}" \
  #          -H "X-Auth-Key: ${{ secrets.CLOUDFLARE_API_KEY }}" \
  #          -H "Content-Type: application/json" \
  #          --data '{"type":"CNAME","name":"demo","content":"'${CLUSTER_HOSTNAME}'","ttl":120,"priority":10,"proxied":true}'
